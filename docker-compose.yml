version: '3.8'

services:
  rest-server:
    build:
      context: ./spring-ocr        # Path to your Spring Boot backend
    container_name: spring-ocr
    ports:
      - "8081:8081"                # Map port 8081 on the host to the Spring Boot app
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/ocr
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
    depends_on:
      - db
      - rabbitmq                   # Ensure RabbitMQ is started before the rest-server
    networks:
      - app-network

  frontend:
    build:
      context: ./react-ocr         # Path to your React frontend
    container_name: react-frontend
    ports:
      - "80:80"                    # Serve React app on port 80
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ocr
    ports:
      - "5433:5432"                # Expose PostgreSQL on port 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management   # Correct RabbitMQ version
    container_name: rabbitmq
    ports:
      - "5672:5672"                # Default port for RabbitMQ
      - "15672:15672"              # Port for RabbitMQ management UI
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
